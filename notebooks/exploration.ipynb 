{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pyspark.context import SparkContext\n",
    "from pyspark.sql.session import SparkSession\n",
    "sc = SparkContext('local')\n",
    "spark = SparkSession(sc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pyspark.sql.types import (StructField, StringType,\n",
    "                               IntegerType, TimestampType,\n",
    "                               FloatType, StructType)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_schema = [StructField('LCLid', StringType(), True),\n",
    "              StructField('stdorToU', StringType(), True),\n",
    "              StructField('DateTime', TimestampType(), True),\n",
    "              StructField('KWH_per_hh_per_30min', FloatType(), True),\n",
    "              StructField('Acorn', StringType(), True),\n",
    "              StructField('Acorn_grouped', StringType(), True)]\n",
    "\n",
    "final_struc = StructType(fields=data_schema)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "power = spark.read.csv('data/Power-Networks-LCL-June2015(withAcornGps)v2_1.csv', schema=final_struc, header=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "root\n",
      " |-- LCLid: string (nullable = true)\n",
      " |-- stdorToU: string (nullable = true)\n",
      " |-- DateTime: timestamp (nullable = true)\n",
      " |-- KWH_per_hh_per_30min: float (nullable = true)\n",
      " |-- Acorn: string (nullable = true)\n",
      " |-- Acorn_grouped: string (nullable = true)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "power.printSchema()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1000000"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "power.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The total number of rows is: 1000000 \n",
      "The total number of columns is: 6\n"
     ]
    }
   ],
   "source": [
    "print('The total number of rows is:', power.count(), '\\nThe total number of columns is:', len(power.columns))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+---------+--------+-------------------+--------------------+-------+-------------+\n",
      "|    LCLid|stdorToU|           DateTime|KWH_per_hh_per_30min|  Acorn|Acorn_grouped|\n",
      "+---------+--------+-------------------+--------------------+-------+-------------+\n",
      "|MAC000002|     Std|2012-10-12 00:30:00|                 0.0|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 01:00:00|                 0.0|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 01:30:00|                 0.0|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 02:00:00|                 0.0|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 02:30:00|                 0.0|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 03:00:00|                 0.0|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 03:30:00|                 0.0|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 04:00:00|                 0.0|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 04:30:00|                 0.0|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 05:00:00|                 0.0|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 05:30:00|                 0.0|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 06:00:00|                 0.0|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 06:30:00|                 0.0|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 07:00:00|                 0.0|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 07:30:00|                 0.0|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 08:00:00|                 0.0|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 08:30:00|                 0.0|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 09:00:00|                 0.0|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 09:30:00|                 0.0|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 10:00:00|                 0.0|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 10:30:00|                 0.0|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 11:30:00|               0.143|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 12:00:00|               0.663|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 12:30:00|               0.256|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 13:00:00|               0.155|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 13:30:00|               0.199|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 14:00:00|               0.125|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 14:30:00|               0.165|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 15:00:00|                0.14|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 15:30:00|               0.148|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 16:00:00|               0.154|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 16:30:00|               0.137|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 17:00:00|               0.493|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 17:30:00|               0.354|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 18:00:00|               0.228|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 18:30:00|               0.195|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 19:00:00|               0.527|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 19:30:00|               0.886|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 20:00:00|               0.198|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 20:30:00|               0.243|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 21:00:00|               0.193|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 21:30:00|               0.342|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 22:00:00|                0.27|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 22:30:00|               0.325|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 23:00:00|               0.269|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 23:30:00|                0.29|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-13 00:00:00|               0.263|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-13 00:30:00|               0.269|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-13 01:00:00|               0.275|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-13 01:30:00|               0.256|ACORN-A|     Affluent|\n",
      "+---------+--------+-------------------+--------------------+-------+-------------+\n",
      "only showing top 50 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "power.show(50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Row(LCLid='MAC000002', stdorToU='Std', DateTime=datetime.datetime(2012, 10, 12, 0, 30), KWH_per_hh_per_30min=0.0, Acorn='ACORN-A', Acorn_grouped='Affluent'),\n",
       " Row(LCLid='MAC000002', stdorToU='Std', DateTime=datetime.datetime(2012, 10, 12, 1, 0), KWH_per_hh_per_30min=0.0, Acorn='ACORN-A', Acorn_grouped='Affluent')]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "power.head(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## create new month column\n",
    "not saved unless saved as a new dataframe"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__all__ = [\n",
    "    \"DataType\", \"NullType\", \"StringType\", \"BinaryType\", \"BooleanType\", \"DateType\",\n",
    "    \"TimestampType\", \"DecimalType\", \"DoubleType\", \"FloatType\", \"ByteType\", \"IntegerType\",\n",
    "    \"LongType\", \"ShortType\", \"ArrayType\", \"MapType\", \"StructField\", \"StructType\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pyspark.sql.functions import (dayofmonth, hour, \n",
    "                                   dayofyear, month, \n",
    "                                   year, weekofyear, \n",
    "                                   format_number, date_format)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+---------+--------+-------------------+--------------------+-------+-------------+-----+\n",
      "|    LCLid|stdorToU|           DateTime|KWH_per_hh_per_30min|  Acorn|Acorn_grouped|Month|\n",
      "+---------+--------+-------------------+--------------------+-------+-------------+-----+\n",
      "|MAC000002|     Std|2012-10-12 00:30:00|                 0.0|ACORN-A|     Affluent|   10|\n",
      "|MAC000002|     Std|2012-10-12 01:00:00|                 0.0|ACORN-A|     Affluent|   10|\n",
      "|MAC000002|     Std|2012-10-12 01:30:00|                 0.0|ACORN-A|     Affluent|   10|\n",
      "|MAC000002|     Std|2012-10-12 02:00:00|                 0.0|ACORN-A|     Affluent|   10|\n",
      "|MAC000002|     Std|2012-10-12 02:30:00|                 0.0|ACORN-A|     Affluent|   10|\n",
      "|MAC000002|     Std|2012-10-12 03:00:00|                 0.0|ACORN-A|     Affluent|   10|\n",
      "|MAC000002|     Std|2012-10-12 03:30:00|                 0.0|ACORN-A|     Affluent|   10|\n",
      "|MAC000002|     Std|2012-10-12 04:00:00|                 0.0|ACORN-A|     Affluent|   10|\n",
      "|MAC000002|     Std|2012-10-12 04:30:00|                 0.0|ACORN-A|     Affluent|   10|\n",
      "|MAC000002|     Std|2012-10-12 05:00:00|                 0.0|ACORN-A|     Affluent|   10|\n",
      "|MAC000002|     Std|2012-10-12 05:30:00|                 0.0|ACORN-A|     Affluent|   10|\n",
      "|MAC000002|     Std|2012-10-12 06:00:00|                 0.0|ACORN-A|     Affluent|   10|\n",
      "|MAC000002|     Std|2012-10-12 06:30:00|                 0.0|ACORN-A|     Affluent|   10|\n",
      "|MAC000002|     Std|2012-10-12 07:00:00|                 0.0|ACORN-A|     Affluent|   10|\n",
      "|MAC000002|     Std|2012-10-12 07:30:00|                 0.0|ACORN-A|     Affluent|   10|\n",
      "|MAC000002|     Std|2012-10-12 08:00:00|                 0.0|ACORN-A|     Affluent|   10|\n",
      "|MAC000002|     Std|2012-10-12 08:30:00|                 0.0|ACORN-A|     Affluent|   10|\n",
      "|MAC000002|     Std|2012-10-12 09:00:00|                 0.0|ACORN-A|     Affluent|   10|\n",
      "|MAC000002|     Std|2012-10-12 09:30:00|                 0.0|ACORN-A|     Affluent|   10|\n",
      "|MAC000002|     Std|2012-10-12 10:00:00|                 0.0|ACORN-A|     Affluent|   10|\n",
      "+---------+--------+-------------------+--------------------+-------+-------------+-----+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "power.withColumn('Month', month(power['DateTime'])).show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------------------+\n",
      "|dayofmonth(DateTime)|\n",
      "+--------------------+\n",
      "|                  12|\n",
      "|                  12|\n",
      "|                  12|\n",
      "|                  12|\n",
      "|                  12|\n",
      "|                  12|\n",
      "|                  12|\n",
      "|                  12|\n",
      "|                  12|\n",
      "|                  12|\n",
      "|                  12|\n",
      "|                  12|\n",
      "|                  12|\n",
      "|                  12|\n",
      "|                  12|\n",
      "|                  12|\n",
      "|                  12|\n",
      "|                  12|\n",
      "|                  12|\n",
      "|                  12|\n",
      "+--------------------+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "power.select(dayofmonth(power['DateTime'])).show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------------+\n",
      "|hour(DateTime)|\n",
      "+--------------+\n",
      "|             0|\n",
      "|             1|\n",
      "|             1|\n",
      "|             2|\n",
      "|             2|\n",
      "|             3|\n",
      "|             3|\n",
      "|             4|\n",
      "|             4|\n",
      "|             5|\n",
      "|             5|\n",
      "|             6|\n",
      "|             6|\n",
      "|             7|\n",
      "|             7|\n",
      "|             8|\n",
      "|             8|\n",
      "|             9|\n",
      "|             9|\n",
      "|            10|\n",
      "+--------------+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "power.select(hour(power['DateTime'])).show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### sparksql queries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "power.createOrReplaceTempView('consumption')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-------------+------------------+\n",
      "|Acorn_grouped|          TotalKWH|\n",
      "+-------------+------------------+\n",
      "|     Affluent|122676.58302195533|\n",
      "|    Adversity|  64406.0420303538|\n",
      "|  Comfortable| 40821.95700398274|\n",
      "|      ACORN-U|11668.203004127368|\n",
      "|         null|              null|\n",
      "+-------------+------------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "spark.sql(\n",
    "'''\n",
    "SELECT Acorn_grouped, SUM(KWH_per_hh_per_30min) as TotalKWH FROM consumption\n",
    "GROUP BY Acorn_grouped\n",
    "ORDER BY TotalKWH DESC\n",
    "'''\n",
    ").show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd \n",
    "import numpy\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_df = spark.sql(\n",
    "'''\n",
    "SELECT Acorn_grouped, SUM(KWH_per_hh_per_30min) as TotalKWH FROM consumption\n",
    "GROUP BY Acorn_grouped\n",
    "ORDER BY TotalKWH DESC\n",
    "'''\n",
    ").toPandas()\n",
    "\n",
    "fig,ax = plt.subplots(1,1,figsize=(10,6))\n",
    "plot_df.plot(x = 'Acorn_grouped', y = 'TotalKWH', kind = 'barh', color = 'C0', ax = ax, legend = False)\n",
    "ax.set_xlabel('Total', size = 16)\n",
    "ax.set_ylabel('Acorn_grouped', size = 16)\n",
    "# plt.savefig('barplot.png')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### filter by one condition using sql like notation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "36633"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "power.filter('KWH_per_hh_per_30min > 1').count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+---------+--------+-------------------+--------------------+-------+-------------+\n",
      "|    LCLid|stdorToU|           DateTime|KWH_per_hh_per_30min|  Acorn|Acorn_grouped|\n",
      "+---------+--------+-------------------+--------------------+-------+-------------+\n",
      "|MAC000002|     Std|2012-10-14 18:30:00|               1.085|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-14 19:00:00|               1.075|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-15 08:30:00|               1.075|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-15 19:00:00|               1.164|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-20 18:00:00|               1.453|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-21 18:00:00|               1.285|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-21 18:30:00|                2.16|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-22 19:00:00|               1.126|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-24 19:00:00|               1.889|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-27 19:30:00|               1.228|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-28 20:00:00|                1.16|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-28 20:30:00|               1.109|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-28 21:30:00|               1.037|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-28 23:00:00|               1.173|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-29 14:00:00|               1.012|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-29 20:00:00|               1.058|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-31 11:00:00|               1.437|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-31 21:30:00|               1.445|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-11-02 14:00:00|               1.284|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-11-03 20:00:00|               1.137|ACORN-A|     Affluent|\n",
      "+---------+--------+-------------------+--------------------+-------+-------------+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "power.filter('KWH_per_hh_per_30min > 1').show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### filter by one condition"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+---------+--------+-------------------+--------------------+-------+-------------+\n",
      "|    LCLid|stdorToU|           DateTime|KWH_per_hh_per_30min|  Acorn|Acorn_grouped|\n",
      "+---------+--------+-------------------+--------------------+-------+-------------+\n",
      "|MAC000002|     Std|2012-10-14 18:30:00|               1.085|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-14 19:00:00|               1.075|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-15 08:30:00|               1.075|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-15 19:00:00|               1.164|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-20 18:00:00|               1.453|ACORN-A|     Affluent|\n",
      "+---------+--------+-------------------+--------------------+-------+-------------+\n",
      "only showing top 5 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "power.filter(power['KWH_per_hh_per_30min'] > 1).show(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### filter by one condition and select columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+---------+--------------------+-------------+\n",
      "|    LCLid|KWH_per_hh_per_30min|Acorn_grouped|\n",
      "+---------+--------------------+-------------+\n",
      "|MAC000002|                2.16|     Affluent|\n",
      "|MAC000002|               2.887|     Affluent|\n",
      "|MAC000002|               2.994|     Affluent|\n",
      "|MAC000002|               2.524|     Affluent|\n",
      "|MAC000002|               2.256|     Affluent|\n",
      "+---------+--------------------+-------------+\n",
      "only showing top 5 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "power.filter(power['KWH_per_hh_per_30min'] > 2).select(['LCLid', 'KWH_per_hh_per_30min', 'Acorn_grouped']).show(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### filter by multiple conditions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+---------+--------+-------------------+--------------------+-------+-------------+\n",
      "|    LCLid|stdorToU|           DateTime|KWH_per_hh_per_30min|  Acorn|Acorn_grouped|\n",
      "+---------+--------+-------------------+--------------------+-------+-------------+\n",
      "|MAC000003|     Std|2012-02-21 00:30:00|               3.379|ACORN-P|    Adversity|\n",
      "|MAC000003|     Std|2012-02-21 01:00:00|               3.148|ACORN-P|    Adversity|\n",
      "|MAC000003|     Std|2012-02-21 01:30:00|               3.277|ACORN-P|    Adversity|\n",
      "|MAC000003|     Std|2012-02-21 02:00:00|               2.568|ACORN-P|    Adversity|\n",
      "|MAC000003|     Std|2012-02-21 02:30:00|               2.146|ACORN-P|    Adversity|\n",
      "+---------+--------+-------------------+--------------------+-------+-------------+\n",
      "only showing top 5 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "power.filter((power['KWH_per_hh_per_30min'] > 1) & (power['Acorn_grouped'] == 'Adversity')).show(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Groupby"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+---------+-------------------------+\n",
      "|    LCLid|avg(KWH_per_hh_per_30min)|\n",
      "+---------+-------------------------+\n",
      "|MAC000032|       0.2675444865053343|\n",
      "|MAC000022|       0.2614754934328884|\n",
      "|MAC000020|      0.13675290458601197|\n",
      "|MAC000009|      0.17890284110045027|\n",
      "|MAC000018|       0.2238542259376987|\n",
      "|MAC000027|      0.18666494323808047|\n",
      "|     null|                     null|\n",
      "|MAC000035|       0.4734078876610596|\n",
      "|MAC000029|      0.07076965419289974|\n",
      "|MAC000028|      0.10019040968613595|\n",
      "|MAC000034|       0.5668212137395978|\n",
      "|MAC000030|      0.23749462457642936|\n",
      "|MAC000011|       0.3142988947884928|\n",
      "|MAC000033|      0.15773639632553427|\n",
      "|MAC000007|      0.19780463159201828|\n",
      "|MAC000012|     0.044056508248345554|\n",
      "|MAC000036|     0.057406429766254125|\n",
      "|MAC000008|       0.3631019144413949|\n",
      "|MAC000016|      0.02735071454767778|\n",
      "|MAC000002|      0.25256190752827157|\n",
      "+---------+-------------------------+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "power.groupBy('LCLid').mean().show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+---------+-------------------------+\n",
      "|    LCLid|sum(KWH_per_hh_per_30min)|\n",
      "+---------+-------------------------+\n",
      "|MAC000032|       10452.427998790401|\n",
      "|MAC000022|       10216.109003916383|\n",
      "|MAC000020|        5344.030005412176|\n",
      "|MAC000009|        4514.971000852063|\n",
      "|MAC000018|        8748.447003871202|\n",
      "|MAC000027|        7292.626002425328|\n",
      "|     null|                     null|\n",
      "|MAC000035|        18473.79600019753|\n",
      "|MAC000029|       2764.4750017372426|\n",
      "|MAC000028|        3221.823004277074|\n",
      "|MAC000034|        22145.13799959235|\n",
      "|MAC000030|         9277.96500370279|\n",
      "|MAC000011|        7450.141002066433|\n",
      "|MAC000033|        6162.761004438624|\n",
      "|MAC000007|        4954.016998222098|\n",
      "|MAC000012|       1086.8300019784365|\n",
      "|MAC000036|        928.5490014691604|\n",
      "|MAC000008|        9445.006998449564|\n",
      "|MAC000016|        533.9680001143133|\n",
      "|MAC000002|        6101.138000160456|\n",
      "+---------+-------------------------+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "power.groupBy('LCLid').sum().show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### aggregate\n",
    "get sum of all KWH used"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-------------------------+\n",
      "|sum(KWH_per_hh_per_30min)|\n",
      "+-------------------------+\n",
      "|       239572.78506041924|\n",
      "+-------------------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "power.agg({'KWH_per_hh_per_30min':'sum'}).show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# sort"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+---------+--------+-------------------+--------------------+-------+-------------+\n",
      "|    LCLid|stdorToU|           DateTime|KWH_per_hh_per_30min|  Acorn|Acorn_grouped|\n",
      "+---------+--------+-------------------+--------------------+-------+-------------+\n",
      "|MAC000034|     Std|2013-02-13 00:00:00|               6.528|ACORN-E|     Affluent|\n",
      "|MAC000034|     Std|2014-01-28 00:00:00|                6.51|ACORN-E|     Affluent|\n",
      "|MAC000034|     Std|2014-01-28 00:00:00|                6.51|ACORN-E|     Affluent|\n",
      "|MAC000034|     Std|2012-03-06 00:30:00|               6.395|ACORN-E|     Affluent|\n",
      "|MAC000034|     Std|2012-02-03 00:30:00|               6.381|ACORN-E|     Affluent|\n",
      "|MAC000034|     Std|2012-02-10 00:30:00|               6.375|ACORN-E|     Affluent|\n",
      "|MAC000034|     Std|2012-02-11 00:30:00|               6.368|ACORN-E|     Affluent|\n",
      "|MAC000034|     Std|2012-02-04 00:30:00|               6.359|ACORN-E|     Affluent|\n",
      "|MAC000034|     Std|2014-01-21 00:00:00|               6.354|ACORN-E|     Affluent|\n",
      "|MAC000034|     Std|2012-02-07 00:30:00|               6.351|ACORN-E|     Affluent|\n",
      "|MAC000034|     Std|2012-02-03 01:00:00|               6.346|ACORN-E|     Affluent|\n",
      "|MAC000034|     Std|2014-01-26 00:00:00|                6.34|ACORN-E|     Affluent|\n",
      "|MAC000034|     Std|2012-02-08 00:30:00|               6.338|ACORN-E|     Affluent|\n",
      "|MAC000034|     Std|2013-12-31 00:00:00|               6.338|ACORN-E|     Affluent|\n",
      "|MAC000034|     Std|2012-02-01 00:30:00|               6.338|ACORN-E|     Affluent|\n",
      "|MAC000034|     Std|2012-02-12 00:30:00|               6.333|ACORN-E|     Affluent|\n",
      "|MAC000034|     Std|2012-02-05 00:30:00|               6.331|ACORN-E|     Affluent|\n",
      "|MAC000034|     Std|2012-01-18 00:30:00|               6.328|ACORN-E|     Affluent|\n",
      "|MAC000034|     Std|2012-02-09 00:30:00|               6.301|ACORN-E|     Affluent|\n",
      "|MAC000034|     Std|2012-01-23 00:30:00|                 6.3|ACORN-E|     Affluent|\n",
      "+---------+--------+-------------------+--------------------+-------+-------------+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "power.orderBy(power['KWH_per_hh_per_30min'].desc()).show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+---------+--------+-------------------+--------------------+-------+-------------+\n",
      "|    LCLid|stdorToU|           DateTime|KWH_per_hh_per_30min|  Acorn|Acorn_grouped|\n",
      "+---------+--------+-------------------+--------------------+-------+-------------+\n",
      "|     null|    null|               null|                null|   null|         null|\n",
      "|     null|    null|               null|                null|   null|         null|\n",
      "|     null|    null|               null|                null|   null|         null|\n",
      "|     null|    null|               null|                null|   null|         null|\n",
      "|     null|    null|               null|                null|   null|         null|\n",
      "|     null|    null|               null|                null|   null|         null|\n",
      "|     null|    null|               null|                null|   null|         null|\n",
      "|     null|    null|               null|                null|   null|         null|\n",
      "|     null|    null|               null|                null|   null|         null|\n",
      "|     null|    null|               null|                null|   null|         null|\n",
      "|     null|    null|               null|                null|   null|         null|\n",
      "|     null|    null|               null|                null|   null|         null|\n",
      "|     null|    null|               null|                null|   null|         null|\n",
      "|     null|    null|               null|                null|   null|         null|\n",
      "|     null|    null|               null|                null|   null|         null|\n",
      "|     null|    null|               null|                null|   null|         null|\n",
      "|     null|    null|               null|                null|   null|         null|\n",
      "|     null|    null|               null|                null|   null|         null|\n",
      "|     null|    null|               null|                null|   null|         null|\n",
      "|     null|    null|               null|                null|   null|         null|\n",
      "|     null|    null|               null|                null|   null|         null|\n",
      "|     null|    null|               null|                null|   null|         null|\n",
      "|     null|    null|               null|                null|   null|         null|\n",
      "|     null|    null|               null|                null|   null|         null|\n",
      "|     null|    null|               null|                null|   null|         null|\n",
      "|     null|    null|               null|                null|   null|         null|\n",
      "|     null|    null|               null|                null|   null|         null|\n",
      "|     null|    null|               null|                null|   null|         null|\n",
      "|     null|    null|               null|                null|   null|         null|\n",
      "|MAC000004|     Std|2012-05-08 14:30:00|                 0.0|ACORN-E|     Affluent|\n",
      "|MAC000004|     Std|2012-05-08 15:30:00|                 0.0|ACORN-E|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 01:30:00|                 0.0|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 02:00:00|                 0.0|ACORN-A|     Affluent|\n",
      "|MAC000004|     Std|2012-05-08 18:30:00|                 0.0|ACORN-E|     Affluent|\n",
      "|MAC000004|     Std|2012-05-08 21:00:00|                 0.0|ACORN-E|     Affluent|\n",
      "|MAC000004|     Std|2012-05-10 17:30:00|                 0.0|ACORN-E|     Affluent|\n",
      "|MAC000004|     Std|2012-05-08 16:00:00|                 0.0|ACORN-E|     Affluent|\n",
      "|MAC000004|     Std|2012-05-08 16:30:00|                 0.0|ACORN-E|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 06:00:00|                 0.0|ACORN-A|     Affluent|\n",
      "|MAC000004|     Std|2012-05-08 19:30:00|                 0.0|ACORN-E|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 10:00:00|                 0.0|ACORN-A|     Affluent|\n",
      "|MAC000004|     Std|2012-05-08 22:00:00|                 0.0|ACORN-E|     Affluent|\n",
      "|MAC000004|     Std|2012-05-09 15:30:00|                 0.0|ACORN-E|     Affluent|\n",
      "|MAC000004|     Std|2012-05-08 14:00:00|                 0.0|ACORN-E|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 05:30:00|                 0.0|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 03:00:00|                 0.0|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 04:00:00|                 0.0|ACORN-A|     Affluent|\n",
      "|MAC000004|     Std|2012-05-08 17:00:00|                 0.0|ACORN-E|     Affluent|\n",
      "|MAC000004|     Std|2012-05-09 05:30:00|                 0.0|ACORN-E|     Affluent|\n",
      "|MAC000004|     Std|2012-05-08 19:00:00|                 0.0|ACORN-E|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 08:00:00|                 0.0|ACORN-A|     Affluent|\n",
      "|MAC000004|     Std|2012-05-08 20:00:00|                 0.0|ACORN-E|     Affluent|\n",
      "|MAC000004|     Std|2012-05-08 13:00:00|                 0.0|ACORN-E|     Affluent|\n",
      "|MAC000004|     Std|2012-05-08 21:30:00|                 0.0|ACORN-E|     Affluent|\n",
      "|MAC000004|     Std|2012-05-09 14:30:00|                 0.0|ACORN-E|     Affluent|\n",
      "|MAC000004|     Std|2012-05-10 16:00:00|                 0.0|ACORN-E|     Affluent|\n",
      "|MAC000004|     Std|2012-05-08 13:30:00|                 0.0|ACORN-E|     Affluent|\n",
      "|MAC000004|     Std|2012-05-09 17:00:00|                 0.0|ACORN-E|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 03:30:00|                 0.0|ACORN-A|     Affluent|\n",
      "|MAC000004|     Std|2012-05-09 18:00:00|                 0.0|ACORN-E|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 07:30:00|                 0.0|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 09:30:00|                 0.0|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 01:00:00|                 0.0|ACORN-A|     Affluent|\n",
      "|MAC000004|     Std|2012-05-09 00:00:00|                 0.0|ACORN-E|     Affluent|\n",
      "|MAC000004|     Std|2012-05-09 01:00:00|                 0.0|ACORN-E|     Affluent|\n",
      "|MAC000004|     Std|2012-05-09 02:30:00|                 0.0|ACORN-E|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 05:00:00|                 0.0|ACORN-A|     Affluent|\n",
      "|MAC000004|     Std|2012-05-09 23:00:00|                 0.0|ACORN-E|     Affluent|\n",
      "|MAC000004|     Std|2012-05-09 06:30:00|                 0.0|ACORN-E|     Affluent|\n",
      "|MAC000004|     Std|2012-05-09 08:00:00|                 0.0|ACORN-E|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 07:00:00|                 0.0|ACORN-A|     Affluent|\n",
      "|MAC000004|     Std|2012-05-09 10:30:00|                 0.0|ACORN-E|     Affluent|\n",
      "|MAC000004|     Std|2012-05-09 11:30:00|                 0.0|ACORN-E|     Affluent|\n",
      "|MAC000004|     Std|2012-05-09 12:30:00|                 0.0|ACORN-E|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 09:00:00|                 0.0|ACORN-A|     Affluent|\n",
      "|MAC000004|     Std|2012-05-10 04:00:00|                 0.0|ACORN-E|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 02:30:00|                 0.0|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 06:30:00|                 0.0|ACORN-A|     Affluent|\n",
      "|MAC000002|     Std|2012-10-12 00:30:00|                 0.0|ACORN-A|     Affluent|\n",
      "|MAC000004|     Std|2012-05-09 15:00:00|                 0.0|ACORN-E|     Affluent|\n",
      "|MAC000004|     Std|2012-05-09 16:30:00|                 0.0|ACORN-E|     Affluent|\n",
      "|MAC000004|     Std|2012-05-09 17:30:00|                 0.0|ACORN-E|     Affluent|\n",
      "|MAC000004|     Std|2012-05-09 19:00:00|                 0.0|ACORN-E|     Affluent|\n",
      "|MAC000004|     Std|2012-05-09 19:30:00|                 0.0|ACORN-E|     Affluent|\n",
      "|MAC000004|     Std|2012-05-09 20:00:00|                 0.0|ACORN-E|     Affluent|\n",
      "|MAC000004|     Std|2012-05-09 20:30:00|                 0.0|ACORN-E|     Affluent|\n",
      "|MAC000004|     Std|2012-05-09 21:00:00|                 0.0|ACORN-E|     Affluent|\n",
      "|MAC000004|     Std|2012-05-09 22:00:00|                 0.0|ACORN-E|     Affluent|\n",
      "|MAC000004|     Std|2012-05-09 03:30:00|                 0.0|ACORN-E|     Affluent|\n",
      "|MAC000004|     Std|2012-05-09 22:30:00|                 0.0|ACORN-E|     Affluent|\n",
      "|MAC000004|     Std|2012-05-09 23:30:00|                 0.0|ACORN-E|     Affluent|\n",
      "|MAC000004|     Std|2012-05-10 00:30:00|                 0.0|ACORN-E|     Affluent|\n",
      "|MAC000004|     Std|2012-05-09 09:00:00|                 0.0|ACORN-E|     Affluent|\n",
      "|MAC000004|     Std|2012-05-10 01:00:00|                 0.0|ACORN-E|     Affluent|\n",
      "|MAC000004|     Std|2012-05-10 01:30:00|                 0.0|ACORN-E|     Affluent|\n",
      "|MAC000004|     Std|2012-05-10 02:00:00|                 0.0|ACORN-E|     Affluent|\n",
      "|MAC000004|     Std|2012-05-10 02:30:00|                 0.0|ACORN-E|     Affluent|\n",
      "|MAC000004|     Std|2012-05-09 14:00:00|                 0.0|ACORN-E|     Affluent|\n",
      "|MAC000004|     Std|2012-05-10 03:30:00|                 0.0|ACORN-E|     Affluent|\n",
      "|MAC000004|     Std|2012-05-10 04:30:00|                 0.0|ACORN-E|     Affluent|\n",
      "+---------+--------+-------------------+--------------------+-------+-------------+\n",
      "only showing top 100 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "power.orderBy('KWH_per_hh_per_30min').show(100)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Why are there nulls? Turns out the nulls exist in the excel file. We can drop them"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pyspark.sql import *\n",
    "from pyspark.sql.functions import col"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-----+--------+--------+--------------------+-----+-------------+\n",
      "|LCLid|stdorToU|DateTime|KWH_per_hh_per_30min|Acorn|Acorn_grouped|\n",
      "+-----+--------+--------+--------------------+-----+-------------+\n",
      "| null|    null|    null|                null| null|         null|\n",
      "| null|    null|    null|                null| null|         null|\n",
      "| null|    null|    null|                null| null|         null|\n",
      "| null|    null|    null|                null| null|         null|\n",
      "| null|    null|    null|                null| null|         null|\n",
      "+-----+--------+--------+--------------------+-----+-------------+\n",
      "only showing top 5 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# alternate way of looking at nulls using col function\n",
    "power.where(col('KWH_per_hh_per_30min').isNull()).show(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1000000"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "power.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "# will be dropped if not at least 2 non-null values in row\n",
    "# power.na.drop(thresh=2)\n",
    "# default is drop the whole row if any values are null\n",
    "# power.na.drop(how=any)\n",
    "# drop row only if all columns in it are null\n",
    "# power.na.drop(how=all)\n",
    "# drop only if the subset rows are null\n",
    "# df.na.drop(subset=['KWH_per_hh_per_30min'])\n",
    "power = power.na.drop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "999971"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "power.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-----+--------+--------+--------------------+-----+-------------+\n",
      "|LCLid|stdorToU|DateTime|KWH_per_hh_per_30min|Acorn|Acorn_grouped|\n",
      "+-----+--------+--------+--------------------+-----+-------------+\n",
      "+-----+--------+--------+--------------------+-----+-------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "power.where(col('KWH_per_hh_per_30min').isNull()).show(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
